/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
import java.nio.file.Files
import java.nio.file.Paths
import groovy.json.JsonOutput

static def getLocalIPv4() {
    def ip4s = []
    NetworkInterface.getNetworkInterfaces()
        .findAll { it.isUp() && !it.isLoopback() && !it.isVirtual() }
        .each {
            it.getInetAddresses()
                .findAll { !it.isLoopbackAddress() && it instanceof Inet4Address }
                .each { ip4s << it }
        }
    return ip4s
}

static def extractProperties(properties, prefix, contents) {
    for (property in properties) {
        def key = property.key as String
        if (key.startsWith(prefix + '.')) {
            def finalKey = key.toUpperCase().replace('.', '_')
            contents[finalKey] = property.value
        }
    }
}

static def readITMAppConfig (project) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('../Shared/ITMSamples.properties').newDataInputStream())
    } catch (IOException ex) {
        println "Error loading Shared ITMSamples.properties; build might not work. ${ex}"
    }
    def noDebugServer = getBoolProperty(properties, 'itm.no_debug_server')
    Map contents = ["Version":"1.0"]
    if (!noDebugServer) {
        def debugHost = properties.getProperty('itm.debug_host')
        def debugUseIp = getBoolProperty(properties, 'itm.debug_use_ip')
        def debugHostSuffix = properties.getProperty('itm.debug_host_suffix')
        def debugPort = properties.getProperty('itm.debug_port')
        if (debugPort == null) {
            debugPort = "3000"
        }
        def appHost = ""
        if (debugUseIp) {
            def ip4s = getLocalIPv4()
            if (ip4s.size() > 0) {
                appHost = ip4s[0].toString()
            }
        } else if (debugHost != null) {
            appHost = debugHost
        } else {
            appHost = InetAddress.localHost.hostName
        }
        if (appHost.startsWith('/')) {
            appHost = appHost.substring(1)
        }
        if (debugHostSuffix != null) {
            appHost += debugHostSuffix
        }
        contents["ITMAPPLICATION_BASE_URL"] = "http://${appHost}:${debugPort}"
    }
    extractProperties(properties, "itmapplication", contents)
    extractProperties(properties, "itmsample", contents)
    return contents
}

static def getBoolProperty(properties, propertyName) {
    return properties.getProperty(propertyName) == 'YES'
}

def addITMAppConfigToResource(buildConfig) {
    def properties = readITMAppConfig(project)
    for(def prop in properties) {
        println "$prop.key: $prop.value"
        buildConfig.resValue("string", prop.key, prop.value)
    }
}

ext {
    addITMAppConfigToResource = this.&addITMAppConfigToResource
}

task genITMAppConfig {
    def destDir = Paths.get("${project.rootDir}/app/src/main/assets/ITMApplication")
    if (!Files.exists(destDir))
        Files.createDirectories(destDir)
    def itmAppConfig = new File("${destDir.toString()}/ITMAppConfig.json")
    if (!itmAppConfig.exists()) {
        itmAppConfig.createNewFile()
    }
    def contents = readITMAppConfig(project)
    itmAppConfig.write(JsonOutput.prettyPrint(JsonOutput.toJson(contents)))
}

genITMAppConfig.dependsOn ":itmsamplesshared:copyITMAssets"
