import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

task copyITMAssets {
    def reactAppDir = "${projectDir}/../../cross-platform/react-app"
    println "reactAppDir ${new File(reactAppDir).canonicalPath}"
    def assetsDir = "${projectDir}/../iTwinStarter/app/src/main/assets/ITMApplication"
    println "assetsDir ${new File(assetsDir).canonicalPath}"

    def foldersToCopy = [
        "${reactAppDir}/build": "${assetsDir}/frontend",
        "${reactAppDir}/lib/webpack": "${assetsDir}/backend",
        "${reactAppDir}/assets/presentation_rules": "${assetsDir}/backend/assets/presentation_rules",
        "${reactAppDir}/node_modules/@itwin/presentation-backend/lib/cjs/assets/supplemental-presentation-rules": "${assetsDir}/backend/assets/supplemental-presentation-rules",
        "${reactAppDir}/node_modules/@itwin/presentation-common/lib/cjs/assets/locales": "${assetsDir}/backend/assets/locales"
    ]

    for (entry in foldersToCopy) {
        def srcDir = Paths.get(entry.key)
        def destDir = Paths.get(entry.value)
        if (!Files.exists(srcDir))
            throw new IOException("${srcDir.toAbsolutePath()} does not exist. Make sure react-app has been built prior to building the Android project.")
        if (!Files.exists(destDir))
            Files.createDirectories(destDir)
        Files.walk(srcDir).forEach(srcPath -> {
            def destinationPath = Paths.get(destDir.toString(), srcDir.relativize(srcPath).toString());
            // skip copying directories that already exist
            if (!Files.exists(destinationPath) || !Files.isDirectory(destinationPath))
                Files.copy(srcPath, destinationPath, StandardCopyOption.REPLACE_EXISTING)
        })
    }
}